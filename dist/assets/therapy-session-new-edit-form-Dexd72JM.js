import{u as te,b as z,r as h,C as m,a0 as u,p as P,j as a,z as N,T as U,A as ae,W as w,I as re,h as $}from"./index-CynfWJw_.js";import{c as ie,a as F,b as ne,d as oe,e as G,o as le}from"./yup-2ah1IYR7.js";import{u as de,F as f}from"./fields-CkpNXIXJ.js";import{F as he}from"./form-provider-BboyyOkn.js";import{C as V}from"./Card-CrNj0u9u.js";import{G as g}from"./Grid-DBuOJ6h1.js";function Ne({currentSession:s}){const A=te(),b=z(),R=z(),q=ie().shape({therapistId:G().required("Danışman seçimi gereklidir"),patientId:G().required("Hasta seçimi gereklidir"),scheduledDate:oe().required("Randevu tarihi gereklidir").test("future-date","Randevu tarihi en az 2 saat sonra olmalıdır",e=>{if(s)return!0;if(!e)return!1;const t=new Date,r=new Date(t.getTime()+2*60*60*1e3);return e>r}),sessionType:F().required("Seans tipi gereklidir"),sessionFormat:F().required("Seans formatı gereklidir"),sessionFee:ne().min(0,"Ücret 0 veya daha fazla olmalıdır").required("Seans ücreti gereklidir"),sessionNotes:F(),homeworkAssigned:F()}),J=h.useMemo(()=>({therapistId:"",patientId:"",scheduledDate:s!=null&&s.scheduledDate?new Date(s.scheduledDate):new Date(Date.now()+2*60*60*1e3),sessionType:(s==null?void 0:s.sessionType)||"INDIVIDUAL",sessionFormat:(s==null?void 0:s.sessionFormat)||"IN_PERSON",sessionFee:(s==null?void 0:s.sessionFee)||500,sessionNotes:(s==null?void 0:s.sessionNotes)||"",homeworkAssigned:(s==null?void 0:s.homeworkAssigned)||""}),[s]),o=de({resolver:le(q),defaultValues:J,mode:"onChange"}),{reset:j,control:ce,handleSubmit:L,formState:{isSubmitting:pe,errors:me,isValid:ue},setValue:v,watch:H}=o,[ge,fe]=h.useState([]),[Ie,ye]=h.useState(!0),[x,S]=h.useState([]),[T,D]=h.useState([]),[M,B]=h.useState(!0),[E,C]=h.useState(!1),[I,W]=h.useState(!1);h.useEffect(()=>{(async()=>{B(!0);try{const t=sessionStorage.getItem("jwt_access_token"),r=await fetch(`${m.therapistListUrl}`,{headers:{Authorization:`Bearer ${t}`}});if(r.ok){const c=await r.json();S(c.therapists||[])}else{console.error("Failed to fetch therapists, status:",r.status);const c=await r.text();console.error("Error response:",c),S([])}}catch(t){console.error("Error fetching therapists:",t),u.error("Danışman listesi yüklenemedi"),S([])}finally{B(!1),W(!0)}})()},[]);const k=h.useCallback(async e=>{if(!e||e===""){D([]),v("patientId","");return}C(!0);try{const t=sessionStorage.getItem("jwt_access_token"),r=await fetch(`${m.therapistPatientPatientsUrl}/${parseInt(e,10)}/patients`,{headers:{Authorization:`Bearer ${t}`}});if(r.ok){const c=await r.json();D(c.data||[])}else console.error("Failed to fetch assigned patients"),D([])}catch(t){console.error("Error fetching assigned patients:",t),u.error("Danışan listesi yüklenemedi"),D([])}finally{C(!1)}},[v]),O=o.watch("therapistId");h.useEffect(()=>{O&&I&&k(O)},[O,I,k]),h.useEffect(()=>{I&&s&&(x.some(t=>t.therapistId===s.therapistId)?k(s.therapistId):j({therapistId:"",patientId:"",scheduledDate:s.scheduledDate?new Date(s.scheduledDate):new Date(Date.now()+2*60*60*1e3),sessionType:s.sessionType||"INDIVIDUAL",sessionFormat:s.sessionFormat||"IN_PERSON",sessionFee:s.sessionFee||500,sessionNotes:s.sessionNotes||"",homeworkAssigned:s.homeworkAssigned||""}))},[s,I,x,j,k]),h.useEffect(()=>{if(I&&s&&!E&&T.length>0){const e=T.some(r=>r.patientId===s.patientId);x.some(r=>r.therapistId===s.therapistId)&&j({therapistId:String(s.therapistId),patientId:e?String(s.patientId):"",scheduledDate:s.scheduledDate?new Date(s.scheduledDate):new Date(Date.now()+2*60*60*1e3),sessionType:s.sessionType||"INDIVIDUAL",sessionFormat:s.sessionFormat||"IN_PERSON",sessionFee:s.sessionFee||500,sessionNotes:s.sessionNotes||"",homeworkAssigned:s.homeworkAssigned||""})}},[s,I,E,T,x,j]);const Y=[{value:"INDIVIDUAL",label:"Bireysel Terapi"},{value:"GROUP",label:"Grup Terapisi"},{value:"COUPLE",label:"Çift Terapisi"},{value:"FAMILY",label:"Aile Terapisi"}],K=[{value:"IN_PERSON",label:"Yüz Yüze"},{value:"ONLINE",label:"Online"},{value:"PHONE",label:"Telefon"}],Q=L(async e=>{b.onTrue();try{await se(e,!0),u.success("Seans taslağı başarıyla kaydedildi!"),A.push(P.dashboard.therapySession.list)}catch(t){console.error("Error saving session:",t),u.error(`Seans kaydedilirken hata oluştu: ${t.message}`)}finally{b.onFalse()}}),X=L(async e=>{R.onTrue();try{s?(await Z(s.sessionId,e),u.success("Seans başarıyla güncellendi!")):(await ee(e),u.success("Seans oluşturuldu! Hasta ve danışmana WhatsApp bildirimi gönderildi. Hasta onayını bekliyoruz...")),A.push(P.dashboard.therapySession.list)}catch(t){console.error("Error creating/updating session:",t),u.error(`Seans işlemi sırasında hata oluştu: ${t.message}`)}finally{R.onFalse()}}),Z=async(e,t)=>{try{const r=sessionStorage.getItem("jwt_access_token"),c={newScheduledDate:new Date(t.scheduledDate).toISOString().slice(0,19),sessionFee:parseFloat(t.sessionFee)||0,sessionType:t.sessionType||"INDIVIDUAL",sessionFormat:t.sessionFormat||"IN_PERSON",sessionNotes:t.sessionNotes||"",therapistNotes:"",homeworkAssigned:t.homeworkAssigned||""},y=await fetch(`${m.psikoHekimBaseUrl}${m.therapySession.update}/${e}`,{method:"PUT",headers:{Authorization:`Bearer ${r}`,"Content-Type":"application/json"},body:JSON.stringify(c)}),l=await y.text();if(!y.ok){let d="Seans güncellenemedi";try{l&&l.trim().startsWith("{")?d=JSON.parse(l).message||d:d=l||d}catch(i){console.error("Error parsing error response:",i),d=l||y.statusText||d}throw new Error(d)}return l?JSON.parse(l):null}catch(r){throw console.error("Error updating session:",r),r}},ee=async e=>{try{const t=sessionStorage.getItem("jwt_access_token"),r=await fetch(`${m.therapistPatientPatientsUrl}/${parseInt(e.therapistId,10)}/patients`,{headers:{Authorization:`Bearer ${t}`}});if(!r.ok)throw new Error("Atama bilgisi alınamadı");const y=(await r.json()).data.find(n=>n.patientId===parseInt(e.patientId,10));if(!y)throw new Error("Seçilen danışan için atama bulunamadı");const l={assignmentId:y.assignmentId,scheduledDate:new Date(e.scheduledDate).toISOString().slice(0,19),sessionFee:parseFloat(e.sessionFee)||0,sessionType:e.sessionType||"REGULAR",sessionFormat:e.sessionFormat||"IN_PERSON",notes:e.sessionNotes||"",sendNotification:!0,notificationType:"WHATSAPP_TWILIO",requirePatientApproval:!0};console.log("Creating session with notification:",l);const d=await fetch(`${m.psikoHekimBaseUrl}${m.therapySession.create}`,{method:"POST",headers:{Authorization:`Bearer ${t}`,"Content-Type":"application/json"},body:JSON.stringify(l)}),i=await d.text();if(!d.ok){let n="Seans oluşturulamadı";try{i&&i.trim().startsWith("{")?n=JSON.parse(i).message||n:n=i||n}catch(p){console.error("Error parsing error response:",p),n=i||d.statusText||n}throw new Error(n)}return i?JSON.parse(i):null}catch(t){throw console.error("Error creating session with notification:",t),t}},se=async(e,t=!1)=>{try{const r=sessionStorage.getItem("jwt_access_token"),c=await fetch(`${m.therapistPatientPatientsUrl}/${parseInt(e.therapistId,10)}/patients`,{headers:{Authorization:`Bearer ${r}`}});if(!c.ok)throw new Error("Atama bilgisi alınamadı");const l=(await c.json()).data.find(i=>i.patientId===parseInt(e.patientId,10));if(!l)throw new Error("Seçilen danışan için atama bulunamadı");const d={assignmentId:l.assignmentId,scheduledDate:new Date(e.scheduledDate).toISOString().slice(0,19),sessionFee:parseFloat(e.sessionFee)||0,sessionType:e.sessionType||"REGULAR",sessionFormat:e.sessionFormat||"IN_PERSON",notes:e.sessionNotes||""};try{const i=await fetch(`${m.psikoHekimBaseUrl}${m.therapySession.create}`,{method:"POST",headers:{Authorization:`Bearer ${r}`,"Content-Type":"application/json"},body:JSON.stringify(d)}),n=await i.text();if(!i.ok){let p="Seans oluşturulamadı";try{n&&n.trim().startsWith("{")?p=JSON.parse(n).message||p:p=n||p}catch(_){console.error("Error parsing error response:",_),p=n||i.statusText||p}throw new Error(p)}return n?JSON.parse(n):null}catch(i){throw console.error("Session creation error:",i),i}}catch(r){throw console.error("Error creating session:",r),r}};return a.jsxs(he,{methods:o,children:[a.jsx(V,{sx:{p:3},children:a.jsxs(N,{spacing:3,children:[a.jsx(U,{variant:"h6",children:s?"Seans Düzenle":"Yeni Seans Oluştur"}),a.jsx(ae,{severity:"info",children:"Seans oluşturduktan sonra danışan ve danışmana bildirim gönderilecektir."})]})}),I?a.jsxs(N,{spacing:3,sx:{p:3},children:[a.jsxs(g,{container:!0,spacing:3,children:[a.jsx(g,{item:!0,xs:12,md:6,children:a.jsxs(f.Select,{name:"therapistId",label:"Danışman",placeholder:"Danışman seçin",onChange:e=>{v("therapistId",e.target.value),k(e.target.value)},disabled:M,children:[a.jsx(w,{value:"",children:a.jsx("em",{children:"Danışman seçin"})}),x.map(e=>a.jsx(w,{value:e.therapistId,children:`${e.therapistFirstName} ${e.therapistLastName}`},`therapist-${e.therapistId}`))]})}),a.jsx(g,{item:!0,xs:12,md:6,children:a.jsxs(f.Select,{name:"patientId",label:"Danışan",placeholder:"Danışan seçin",disabled:!H("therapistId")||E,children:[a.jsx(w,{value:"",children:a.jsx("em",{children:"Danışan seçin"})}),Array.isArray(T)&&T.map(e=>a.jsx(w,{value:e.patientId,children:e.patientName},`patient-${e.patientId}`))]})}),a.jsx(g,{item:!0,xs:12,md:6,children:a.jsx(f.MobileDateTimePicker,{name:"scheduledDate",label:"Randevu Tarihi ve Saati",ampm:!1,slotProps:{textField:{placeholder:"GG/AA/YYYY SS:DD"},actionBar:{actions:["cancel","accept"]},toolbar:{title:"Tarih ve Saat Seçin"},switchViewButton:{"aria-label":"Görünümü değiştir"}}})}),a.jsx(g,{item:!0,xs:12,md:6,children:a.jsx(f.Select,{name:"sessionType",label:"Seans Tipi",children:Y.map(e=>a.jsx(w,{value:e.value,children:e.label},e.value))})}),a.jsx(g,{item:!0,xs:12,md:6,children:a.jsx(f.Select,{name:"sessionFormat",label:"Seans Formatı",children:K.map(e=>a.jsx(w,{value:e.value,children:e.label},e.value))})}),a.jsx(g,{item:!0,xs:12,md:6,children:a.jsx(f.Text,{name:"sessionFee",label:"Seans Ücreti",type:"number",InputProps:{startAdornment:a.jsx(re,{position:"start",children:"₺"})}})}),a.jsx(g,{item:!0,xs:12,children:a.jsx(f.Text,{name:"sessionNotes",label:"Seans Notları",multiline:!0,rows:4,placeholder:"Seans hakkında ek bilgiler..."})}),a.jsx(g,{item:!0,xs:12,children:a.jsx(f.Text,{name:"homeworkAssigned",label:"Verilen Ödev",multiline:!0,rows:3,placeholder:"Danışana verilen ödevler veya yapılacaklar..."})})]}),a.jsxs(N,{justifyContent:"flex-end",direction:"row",spacing:2,children:[a.jsx($,{color:"inherit",size:"large",variant:"outlined",onClick:()=>A.push(P.dashboard.therapySession.list),children:"İptal"}),a.jsx($,{size:"large",variant:"outlined",disabled:b.value,onClick:Q,children:"Taslak Kaydet"}),a.jsx($,{size:"large",variant:"contained",onClick:async()=>{if(await o.trigger())X();else{const t=[];o.formState.errors.therapistId&&t.push(o.formState.errors.therapistId.message),o.formState.errors.patientId&&t.push(o.formState.errors.patientId.message),o.formState.errors.scheduledDate&&t.push(o.formState.errors.scheduledDate.message),o.formState.errors.sessionType&&t.push(o.formState.errors.sessionType.message),o.formState.errors.sessionFormat&&t.push(o.formState.errors.sessionFormat.message),o.formState.errors.sessionFee&&t.push(o.formState.errors.sessionFee.message),t.length>0?u.error(t.join(", ")):u.error("Lütfen tüm gerekli alanları doldurun")}},children:s?"Güncelle":"Oluştur ve Planla"})]})]}):a.jsx(V,{sx:{p:3},children:a.jsx(N,{spacing:3,alignItems:"center",children:a.jsx(U,{children:"Veriler yükleniyor..."})})})]})}export{Ne as T};
